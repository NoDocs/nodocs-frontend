type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
  me: User
  users(orderBy: String, after: String, first: Int): UserConnection
  document(documentId: String): Document
  documents(orderBy: String, teamId: String, userId: String, after: String, first: Int): [Document]
  teams(companyId: String): [Team]
  currentTeam: Team
  neuron(neuronId: String!): Neuron
  neurons(teamId: String, companyId: String): [Neuron]
  availableCompanies: [Company]
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type User implements Node {
  # The ID of an object
  id: ID!
  fullName: String
  email: String
  color: String
  type: String
  token: String
  avatar: String
  currentCompany: Company
  currentTeam: Team
}

type Company implements Node {
  # The ID of an object
  id: ID!
  name: String
  members: [CompanyMember]
}

type CompanyMember implements Node {
  # The ID of an object
  id: ID!
  user: User
  role: String
}

type Team implements Node {
  # The ID of an object
  id: ID!
  name: String
  members: [TeamMember]
}

type TeamMember implements Node {
  # The ID of an object
  id: ID!
  user: User
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Int!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Document implements Node {
  # The ID of an object
  id: ID!
  sections: [Section]
  name: String
  owner: User
  company: Company
  team: Team
  createdAt(format: String): String
  updatedAt(format: String): String
}

type Section implements Node {
  # The ID of an object
  id: ID!
  sectionId: String
  pages: [Page]
  title: String
}

type Page implements Node {
  # The ID of an object
  id: ID!
  pageId: String
  title: String
  section: Section
  content: String
  creator: User
  createdAt(format: String): String
  updatedAt(format: String): String
}

type Neuron implements Node {
  # The ID of an object
  id: ID!
  name: String
  neuronId: String
  content: String
  creator: User
  pages: [Page]
  teams: [Team]
  companies: [Company]
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type Mutation {
  # Sign in mutation
  signIn(input: SignInInput!): SignInPayload

  # Sign up mutation
  signUp(input: SignUpInput!): SignUpPayload

  # Create company mutation
  createCompany(input: CreateCompanyInput!): CreateCompanyPayload

  # Update company member information mutation
  updateCompanyMemberInformation(input: UpdateCompanyMemberInformationInput!): UpdateCompanyMemberInformationPayload

  # Create neuron
  createNeuron(input: CreateNeuronInput!): CreateNeuronPayload

  # Attach neuron to page
  attachNeuronToDocument(input: attachNeuronToPageInput!): attachNeuronToPagePayload

  # Create document
  createDocument(input: CreateDocumentInput!): CreateDocumentPayload

  # Send team invitations
  sendInvitations(input: SendInvitationsInput!): SendInvitationsPayload
}

type SignInPayload {
  user: User
  clientMutationId: String
}

input SignInInput {
  email: String!
  password: String!
  clientMutationId: String
}

type SignUpPayload {
  user: User
  clientMutationId: String
}

input SignUpInput {
  email: String!
  fullName: String!
  password: String!
  clientMutationId: String
}

type CreateCompanyPayload {
  company: Company
  clientMutationId: String
}

input CreateCompanyInput {
  name: String!
  industry: String!
  industryDescription: String!
  clientMutationId: String
}

type UpdateCompanyMemberInformationPayload {
  companyMember: CompanyMember
  clientMutationId: String
}

input UpdateCompanyMemberInformationInput {
  name: String!
  department: String!
  departmentDescription: String!
  clientMutationId: String
}

type CreateNeuronPayload {
  neuron: Neuron
  clientMutationId: String
}

input CreateNeuronInput {
  neuronId: String!
  content: String!
  name: String!
  clientMutationId: String
}

type attachNeuronToPagePayload {
  attachedPageId: String
  neuronId: String
  clientMutationId: String
}

input attachNeuronToPageInput {
  neuronId: String!
  pageId: String!
  clientMutationId: String
}

type CreateDocumentPayload {
  document: Document
  clientMutationId: String
}

input CreateDocumentInput {
  documentId: String!
  content: String!
  name: String!
  clientMutationId: String
}

type SendInvitationsPayload {
  teamMembers: [TeamMember]
  clientMutationId: String
}

input SendInvitationsInput {
  emails: String!
  clientMutationId: String
}
